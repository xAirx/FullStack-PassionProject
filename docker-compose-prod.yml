version: '3.8'

networks:
  log-net:
    driver: bridge
  mongonet:
    driver: bridge

services:

  # WIP - MVP - Integration of an 0Auth2 proxy

  # oauth2-proxy:
  # image: caarlos0/oauth2_proxy
  # ports:
  # - 127.0.0.1:4180:4180
  # command:
  # - '-client-id=123'
  # - '-client-secret=456'
  # - '-provider=github'
  # - '-github-org=caarlos0-m'
  # - '-email-domain=*'
  # - '-cookie-secret=foo bar 1234'
  # - '-cookie-secure=false'
  # - '-upstream=http://nginx:80'
  # - '-http-address=0.0.0.0:4180'
  # - '-redirect-url=http://m.carlosbecker.com/oauth2/callback'
  # - '-set-xauthrequest=true'

  # WIP - MVP - nginx-reverse-proxy:
  #nginx:
  #  image: nginx:1.21.5-alpine
  #  container_name: nginx
  #  restart: always
  #  ports:
  #    - 80:80
  #  volumes:
  #    - ./nginx/nginx-dev.conf:/etc/nginx/conf.d/default.conf
  #  depends_on:
  #    - api-dev
  #    - client-dev
  #  networks:

  # expose one service - on the port 80, and we mount our config file to the /etc/nginx/conf.d folder.
  # nginx will be the only thing facing the internet for real, and it will route traffic to the right places.

  #prometheus:
  #  image: prom/prometheus:v2.32.1
  #  container_name: prometheus
  #  volumes:
  #    - ./prometheus:/etc/prometheus
  #    - prometheus_data:/prometheus
  #  command:
  #    - '--config.file=/etc/prometheus/prometheus.yml'
  #    - '--storage.tsdb.path=/prometheus'
  #    - '--web.console.libraries=/etc/prometheus/console_libraries'
  #    - '--web.console.templates=/etc/prometheus/consoles'
  #    - '--storage.tsdb.retention.time=200h'
  #    - '--web.enable-lifecycle'
  #  restart: unless-stopped
  #  ports:
  #    - "9090:9090"
  #  #expose:
  #    #- 9090
  #  networks:
  #    - log-net
  #  labels:
  #   org.label-schema.group: "health,logging & monitoring"
  #

  #alertmanager:
  #  image: prom/alertmanager:v0.23.0
  #  container_name: alertmanager
  #  volumes:
  #    - ./alertmanager:/etc/alertmanager
  #  command:
  #    - '--config.file=/etc/alertmanager/config.yml'
  #    - '--storage.path=/alertmanager'
  #  restart: unless-stopped
  #  ports:
  #    - "9093:9093"
  #  #expose:
  #    #- 9093
  #  networks:
  #    - log-net
  #  labels:
  #    org.label-schema.group: "health,logging & monitoring"


  #nodeexporter:
  #  image: prom/node-exporter:v1.3.1
  #  #container_name: node-exporter
  #  #build:
  #    #dockerfile: Dockerfile
  #    #context: ./cineexporter/app
  #  #volumes:
  #    #- './cineexporter/app:/app'
  #    #- './cineexporter/app/node_modules'
  #  #image: prom/node-exporter:latest
  #  container_name: nodeexporter
  #  volumes:
  #    - /proc:/host/proc:ro
  #    - /sys:/host/sys:ro
  #    - /:/rootfs:ro
  #    #- /:/host:ro,rslave
  #  command:
  #    - '--path.procfs=/host/proc'
  #    - '--path.rootfs=/rootfs'
  #    #- '--path.rootfs=/host'
  #    - '--path.sysfs=/host/sys'
  #    - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
  #  restart: unless-stopped
  #  #expose:
  #    #- 9100
  #  networks:
  #    - log-net
  #  labels:
  #    org.label-schema.group: "health,logging & monitoring"
  #  ports:
  #    - "9100:9100"


# Letâ€™s break this down. basically, we are telling Docker to use the current directory as a context
# where to run everything and use the Dockerfile found in the local directory.
# Then we are telling docker to name the image built reactapp_image and the container
# reactapp_container We are also telling docker to map our local machines port 8000 to
# the containers port 8000 . Then since we want all code changes we make locally to be reflected
# in our dev server we are going to map our current directory to the containers /app directory
# where our application runs in.

    react-boilerplate:
        build:
          #Either a path to a directory containing a Dockerfile, or a url to a git repository.
          context: ./frontend/fullstack-react-docker-boilerplate/
          # Run DockerFile.dev for now.
          dockerfile: ./dev/Dockerfile
        restart: always
        image: react-boilerplate-frontend_image
        container_name:  react-boilerplate-frontend-dev
        ports:
         - 5000:5000
        #The React development server will be running inside the container and will be watching the src folder.
        volumes:
            - ./frontend/react-boilerplate/src:/app/src
        #links:
        #    - express
        environment:
         #React specific....
          - CHOKIDAR_USEPOLLING=true
        depends_on:
          -  express-api
        networks:
            - mongonet


    express-api-dev:
        build:
          #Either a path to a directory containing a Dockerfile, or a url to a git repository.
          context: ./frontend/fullstack-react-docker-boilerplate/
          # Run DockerFile.dev for now.
          dockerfile: ./dev/Dockerfile
          restart: always
          image: express-api
          container_name: example express api
          ports:
           - 5000:5000
          env_file:
          - ./backend/example-express-backend/.env
          # environment:
          #   - MONGODB_URL=mongodb://mongo:27017/restAPI
          volumes:
              - ./backend/example-express-backend/src:/app/src
              #- ./backend/example-express-backend/node_modules
          depends_on:
              - mongo-db
          networks:
              - mongonet

    mongo-db:
        image: mongo
        container_name: mongodb
        ports:
          - 27017:27017
        environment:
          - MONGO_INITDB_ROOT_USERNAME=rootuser
          - MONGO_INITDB_ROOT_PASSWORD=rootpass
        volumes:
          - mongodb-data

    mongo-express:
        image: mongo-express
        container_name: mongo-express
        ports:
          - 8081:8081
        environment:
          - ME_CONFIG_MONGODB_ADMINUSERNAME=rootuser
          - ME_CONFIG_MONGODB_ADMINPASSWORD=rootpass
          - ME_CONFIG_MONGODB_SERVER=mongodb
    mongo-seed:
          image: stefanwalther/mongo-seed
          container_name: mongo-seed
          environment:
            - MONGODB_HOST=mongo
            - MONGODB_PORT=27017
          volumes:
            - ./config/db-seed:/data
          depends_on:
            - mongo
          command: [
            "mongoimport --host mongo --port 27017 --db sammlerio --mode upsert --type json --file /data/auth-service~~user.json --jsonArray"
          ]

      volumes:
        mongodb: