version: '3.8'

networks:
  incidentnet:
    driver: bridge
  monitor-net:
    driver: bridge
  mongonet:
    driver: bridge

services:
  #Integration of an 0Auth2 proxy to connect to the cinemataztic cloud (sharing tokens)

  # oauth2-proxy:
  # image: caarlos0/oauth2_proxy
  # ports:
  # - 127.0.0.1:4180:4180
  # command:
  # - '-client-id=123'
  # - '-client-secret=456'
  # - '-provider=github'
  # - '-github-org=caarlos0-m'
  # - '-email-domain=*'
  # - '-cookie-secret=foo bar 1234'
  # - '-cookie-secure=false'
  # - '-upstream=http://nginx:80'
  # - '-http-address=0.0.0.0:4180'
  # - '-redirect-url=http://m.carlosbecker.com/oauth2/callback'
  # - '-set-xauthrequest=true'

  #nginx-reverse-proxy:
  #image: nginx
  #ports:
  #- 80:80
  #volumes:
  #- /local/path/to/nginx.conf:/etc/nginx/conf.d/m.conf:ro

  # expose one service - on the port 80, and we mount our config file to the /etc/nginx/conf.d folder.
  # nginx will be the only thing facing the internet for real, and it will route traffic to the right places.

  prometheus:
    image: prom/prometheus:v2.32.1
    container_name: prometheus
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    ports:
      - "9090:9090"
    #expose:
      #- 9090
    networks:
      - monitor-net
    labels:
      org.label-schema.group: "monitoring"

  alertmanager:
    image: prom/alertmanager:v0.23.0
    container_name: alertmanager
    volumes:
      - ./alertmanager:/etc/alertmanager
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'
    restart: unless-stopped
    ports:
      - "9093:9093"
    #expose:
      #- 9093
    networks:
      - monitor-net
    labels:
      org.label-schema.group: "monitoring"


  nodeexporter:
    image: prom/node-exporter:v1.3.1
    #container_name: node-exporter
    #build:
      #dockerfile: Dockerfile
      #context: ./cineexporter/app
    #volumes:
      #- './cineexporter/app:/app'
      #- './cineexporter/app/node_modules'
    #image: prom/node-exporter:latest
    container_name: nodeexporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
      #- /:/host:ro,rslave
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      #- '--path.rootfs=/host'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    restart: unless-stopped
    #expose:
      #- 9100
    networks:
      - monitor-net
    labels:
      org.label-schema.group: "monitoring"
    ports:
      - "9100:9100"



  #mongo-seed:
  #build: ./mongo-seed
  #links:
  #- mongodb
  #networks:
  # - mongonet

  #mongo_db:
  # image: mongo:5.0
  # environment:
  #   MONGO_INITDB_ROOT_USERNAME: root
  #   MONGO_INITDB_ROOT_PASSWORD: rootpassword
  # ports:
  #   - 27017:27017
  #-volumes:
  # - ./data/mongodb:/data/db
  #networks:
  # - mongonet

  #incident-management-system:
  #  build:
  #    dockerfile: Dockerfile
  #    context: "./incident-management-system"
  #  links:
  #    - mongo-db
  #  depends_on:
  #    - mongo-db
  #  volumes:
  #    - /app/node_modules
  #    - ./incident-management-system:/app
  #networks:
  # - incidentnet
  # - monitor-net

  #incidents-portal:
  #  stdin_open: true
  #  environment:
  #    - CHOKIDAR_USEPOLLING=true
  #  build:
  #    dockerfile: Dockerfile
  #    context: ./incidents-portal
  #  volumes:
  #    - /app/node_modules
  #    - ./incidents-portal/app:/app
  #networks:
  # - incidentnet
